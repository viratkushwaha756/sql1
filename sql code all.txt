Problem statement 1.

Consider following Bank database schema and solve given queries: 
Account(Acc_no, branch_name,balance) 
branch(branch_name,branch_city, assets) 
customer(cust_name,cust_street,cust_city) 
Depositor(cust_name,acc_no) 
Loan(loan_no,branch_name,amount) 
Borrower(cust_name,loan_no) 
Q.1 Create above tables with appropriate constraints like primary key, foreign key, not null 
etc. 
with suitable data 

create table branch(branch_name char(20) primary key,branch_city char(20) , assets 
number); 
Table created. 
 insert into branch values('Nigdi','Pune',10000000) 
 insert into branch values('Akurdi','Pune',50000000); 
 insert into branch values('Khed','Pune',70000000); 
 insert into branch values('Chinchwad','Pune',80000000); 
 insert into branch values('Wafgaon','Khed',30000000); 
 select * from branch; 

create table account(acc_no number primary key , branch_name char(20) references 
branch(branch_name) on delete set null ,balance number); 
Table created. 
 insert into account values(1234567891,'Nigdi',10000); 
 insert into account values(1234567892,'Nigdi',20000); 
 insert into account values(1234567893,'Khed',30000); 
 insert into account values(1234567894,'Chinchwad',40000); 
 select * from account; 
 
create table customer(cust_name char(20) 
primary key,cust_street varchar(30),cust_city char(20) ); 

Table created. 
 insert into customer values(‘Harshad’,'khed','Pune'); 
 insert into customer values('Aviraj','Nigdi11','Pune'); 
 insert into customer values('Nayan','Nigdi12','Pune'); 
 insert into customer values('Ashirwad','Nigdi13','Pandharpur'); 
 insert into customer values('Aditesh','audh','Pune'); 
 insert into customer values('Vedant','Khed','Pune'); 
 insert into customer values('Aditya','Khed','Pune'); 
 insert into customer values('Siddhesh','Kolhapur','Kolhapur'); 
 insert into customer values('Rushi','Kolhapur','Kolhapur'); 
 insert into customer values('Sarang','Satara','Satara'); 
 select * from customer; 

 create table depositor(cust_name char(20) references customer(cust_name) on delete 
 cascade , acc_no number references account(acc_no) on delete set null); 
 Table created. 
 select * from depositor; 

 create table loan(loan_no number primary key,branch_name char(20) references 
 branch(branch_name) on delete set null , amount number); 

 Table created. 
 select * from loan; 


 create table borrower(customer_name char(20) references customer(cust_name)on 
 delete cascade,loan_no number references loan(loan_no) on delete set null); 
 Table created. 
 select * from borrower; 

Q.2. Create synonym for customer table as cust. 

create synonym cust for customer; 
Synonym created. 

Q.3 Add customer phone number in Customer table. 
alter table customer add phone_no number(10); 
Table altered.

Q.4 Delete phone number attribute from Customer table. 
alter table customer drop column phone_no; 
Table altered. 
desc customer; 

Q.5. Find the names of all branches in loan relation. 
 select distinct branch_name from loan; 
 
Q.6. Find all customers who have a loan from bank. Find their names,loan_no and loan 
amount. 
 select borrower.customer_name , borrower.loan_no , loan.amount from borrower,loan 
where borrower.loan_no = loan.loan_no; 

Q.7. List all customers in alphabetical order who have loan from Nigdi branch. 
 select customer_name from borrower where loan_no in (select loan_no from loan 
where branch_name = 'Nigdi') order by customer_name; 

Q.8. Find all customers who have an account or loan or both at bank. 
 SELECT cust_name FROM customer where cust_name IN(SELECT customer_name 
FROM borrower INTERSECT SELECT cust_name FROM depositor); 

Q.9. Find average account balance at Nigdi branch. 
 SELECT AVG(balance) AS avg_balance FROM account WHERE branch_name = 'Nigdi'; 

Q.10. Find no. of depositors at each branch. 
SELECT branch_name, COUNT(*) AS num_depositors FROM depositor GROUP BY 
branch_name; 

Q.11. Delete all tuples at every branch located in Nigdi. 
DELETE FROM branch WHERE branch_city = 'Nigdi'; 
DELETE FROM account WHERE branch_name = 'Nigdi'; 

Problem statement 2.

a) Consider following database schema and solve given queries 
cust_mstr(cust_no,fname,lname) 
add_dets(code_no,add1,add2,state,city,pincode) 
1. Create above Tables with suitable data 
2. Retrieve the address of customer Fname as 'xyz' and Lname as 'pqr' 
3. Create View on add_dets table by selecting any two columns and perform insert 
update delete operations 
 CREATE TABLE cust_mstr ( 
2      cust_no INT PRIMARY KEY, 
3      fname VARCHAR(50), 
4      lname VARCHAR(50) 
5  ); 
Table created. 
select * from cust_mstr; 
 
CREATE TABLE add_dets (code_no INT references cust_mstr(cust_no),add1 
VARCHAR(100),add2 VARCHAR(100),state VARCHAR(50),city VARCHAR(50),pincode 
VARCHAR(10)); 
Table created. 
INSERT INTO add_dets values(1,'Jaulke BK','Pargaon','Maharashtra','Khed',410512); 
1 row created. 
INSERT INTO add_dets values(2,'xyz','Kolhapur','Maharashtra','Kolhapur',410512); 
1 row created 
select * from add_dets where code_no IN ( select cust_no from cust_mstr where 
fname='Harshad' AND lname='Karale'); 

b) Create following Tables 
emp_mstr(e_mpno,f_name,l_name,m_name,dept,desg,branch_no) 
branch_mstr(name,b_no) 
List the employee details along with branch names to which they belong 
CREATE TABLE branch_mstr(name char(10),b_no number primary key); 
Table created. 
select * from branch_mstr; 

CREATE TABLE emp_mstr(emp_no number NOT NULL,fname char(10),lname 
char(10),mname char(10),dept char(10),desg char(10),branch_no number references 
branch_mstr(b_no) on delete set null); 
Table created. 
select * from emp_mstr; 

select * from emp_mstr where branch_no IN(select b_no from branch_mstr where 
name = 'Computer'); 

Problem statement 3. Consider following Bank database schema and solve given queries: 
Account(Acc_no, branch_name,balance) 
branch(branch_name,branch_city, assets) 
customer(cust_name,cust_street,cust_city) 
Depositor(cust_name,acc_no) 
Loan(loan_no,branch_name,amount) 
Borrower(cust_name,loan_no) 

Q.1 Create above tables with appropriate constraints like primary key, foreign key 
constrains, not 
null etc. with suitable data 

Q.2. Modify “assets” attribute of branch table to “Property” 
ALTER TABLE branch RENAME COLUMN assets TO property; 
Table altered. 

Q.3. Find all loan numbers for loans made at Akurdi Branch with loan amount > 12000. 
SELECT loan_no FROM loan WHERE branch_name = 'Nigdi' AND amount > 12000; 

Q.4. Find all customers who have both account and loan at bank. 
SELECT cust_name FROM customer where cust_name IN(SELECT customer_name 
FROM borrower INTERSECT SELECT cust_name FROM depositor); 

Q.5. Find all customer who have account but no loan at the bank. 
SELECT cust_name FROM customer where cust_name IN(SELECT customer_name 
FROM borrower MINUS SELECT cust_name FROM depositor); 
 
Q.6. Find the average account balance at each branch 
SELECT branch_name,AVG(balance) AS avg_balance FROM account Group by 


Q.7. Find the branches where average account balance > 12000. 
Q11. Find the branches where average account balance > 12000. 
SELECT AVG(balance),branch_name FROM account GROUP BY branch_name HAVING 
AVG(balance)>20000; 

Q.8. Find number of tuples in customer relation. 
SELECT COUNT(*) AS tuple_no FROM customer; 


Q.9. Calculate total loan amount given by bank. 
SELECT SUM(amount) AS total_loan FROM loan; 

Q.10. Delete all loans with loan amount between 1300 and 1500. 
DELETE FROM loan WHERE amount BETWEEN 25000 AND 30000; 


Q.11. Create sequence roll_seq and use in student table for roll_no column. 
CREATE SEQUENCE roll_no START with 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 100 
CYCLE; 
Sequence created.

CREATE TABLE student(rollno number , name varchar(10)); 
Table created. 
select * from student; 

Problem statement 4. 
a) Create following Tables with suitable data and solve following query 
cust_mstr(custno,fname,lname) 
acc_fd_cust_dets(codeno,acc_fd_no) 
fd_dets(fd_sr_no,amt) 
List the customer holding fixed deposit of amount more than 5000 
CREATE TABLE fd_dets(fd_sr_no number primary key ,amt number); 
Table created. 
select * from cust_mstr; 

CREATE TABLE acc_fd_cust_dets(codeno number references cust_mstr(cust_no) on 
delete cascade,acc_fd_no number references fd_dets(fd_sr_no) on delete cascade); 
Table created. 
select * from acc_fd_cust_dets; 

select * from cust_mstr where cust_no IN(SELECT codeno from acc_fd_cust_dets 
where acc_fd_no IN(SELECT fd_sr_no FROM fd_dets where amt>5000)); 

b) Create view on cust_mstr and acc_fd_cust_dets tables by selecting any one column 
from each table perform insert update delete operations 
1. Create a view selecting any one column from each table: 
CREATE VIEW cust_acc_view AS SELECT c.cust_name, a.acc_no FROM cust_mstr c JOIN 
acc_fd_cust_dets a ON c.cust_no = a.cust_no; 

2. Perform insert operation on the view: 
INSERT INTO cust_acc_view (cust_name, acc_no) VALUES ('John Doe', 123456); 

3. Perform update operation on the view: 
UPDATE cust_acc_view SET acc_no = 654321 WHERE cust_name = 'John Doe'; 

4. Perform delete operation on the view: 
DELETE FROM cust_acc_view WHERE cust_name = 'John Doe'; 

c) Create following Tables with suitable data and solve following query 
emp_mstr(emp_no,f_name,l_name,m_name,dept) 
cntc_dets(code_no,cntc_type,cntc_data) 
List the employee details along with contact details using left outer join & right join 
CREATE TABLE branch_mstr(name char(10),b_no number primary key); 
Table created. 
select * from branch_mstr; 

CREATE TABLE emp_mstr(emp_no number NOT NULL,fname char(10),lname 
char(10),mname char(10),dept char(10),desg char(10),branch_no number references 
branch_mstr(b_no) on delete set null); 
Table created. 
select * from emp_mstr; 

select * from emp_mstr where branch_no IN(select b_no from branch_mstr where 
name = 'Computer'); 
 
cntc_dets(code_no,cntc_type,cntc_data) List the employee details along with contact 
details using left outer join & right join 
CREATE TABLE emp_mstr(emp_no number primary key,fname char(10),lname 
char(10),mname char(10),dept char(10)); 
Table created. 
select * from emp_mstr; 

CREATE TABLE cntc_dets(codeno number references 
emp_mstr(emp_no),cntc_type varchar(20),cntc_data varchar(20)); 
Table created. 
select * from cntc_dets; 

select * from emp_mstr LEFT OUTER JOIN cntc_dets ON 
emp_mstr.emp_no = cntc_dets.codeno; 


RIGHT OUTER JOIN 
select * from emp_mstr RIGHT OUTER JOIN cntc_dets ON 
emp_mstr.emp_no = cntc_dets.codeno; 

5. Create following Tables cust_mstr(cust_no,fname,lname) add_dets(code_no,pincode) List 
the customer who do not have bank branches in their vicinity. 
CREATE TABLE cust_mstr(cust_no varchar(10) primary key ,fname char(10),lname 
char(10)); 
Table created. 
select * from cust_mstr; 

select * from add_dets; 
CREATE TABLE add_dets(codeno varchar(10),pincode number); 
Table created. 

select * from cust_mstr where cust_no IN(select codeno from add_dets where 
codeno like 'C%' AND pincode NOT IN(select pincode from add_dets where codeno like 
'B%')); 




Problem statement 5. 
a) Consider following database schema and solve given queries 
cust_mstr(cust_no,fname,lname) 
add_dets(code_no,add1,add2,state,city,pincode) 
1. Create above Tables with suitable data 
2. Retrieve the address of customer Fname as 'xyz' and Lname as 'pqr' 
3. Create View on add_dets table by selecting any two columns and perform insert update 
delete operations 

b)Create following Tables 
cust_mstr(cust_no,fname,lname) 
add_dets(code_no,pincode) 
(Most of the queries are similar as follow) 
List the customer who do not have bank branches in their vicinity. 

Problem statement 6.
 
Q 1.Consider table Stud(Roll, Att,Status) 
Write a PL/SQL block for following requirement and handle the exceptions. 
Roll no. of student will be entered by user. Attendance of roll no. entered by user will be 
checked in 
Stud table. If attendance is less than 75% then display the message “Term not granted” 
and set the 
status in stud table as “D”. Otherwise display message “Term granted” and set the status 
in stud 
table as “ND”. 
CREATE TABLE stud(roll_no NUMBER PRIMARY KEY , att NUMBER ,status char(5)); 

Declare 
mroll number(10); 
matt number(10); 
Begin 
mroll:=&mroll; 
select att into matt from stud where roll_no = mroll; 
if matt<75 then 
dbms_output.put_line(mroll || 'is detained'); 
update stud set status='D' where roll_no = mroll; 
else 
dbms_output.put_line(mroll || 'is not detained'); 
update stud set status='ND' where roll_no = mroll; 
end if; 
Exception 
when no_data_found then 
dbms_output.put_line(mroll || 'Not found'); 
End; 
/ 
select * from stud; 


Q 2.The bank manager has decided to activate all those accounts which were previously 
marked as 
inactive for performing no transaction in last 365 days. Write a PL/SQ block (using implicit 
cursor) 
to update the status of account, display an approximate message based on the no. of rows 
affected 
by the update. (Use of %FOUND, %NOTFOUND, %ROWCOUNT) 
SELECT * FROM account; 


BEGIN 
UPDATE account SET status = 'active' WHERE status = 'inactive'; 
dbms_output.put_line(SQL%ROWCOUNT||' no of account updated'); 
END; 
/ 
2 no of account updated 
PL/SQL procedure successfully completed. 
SELECT * FROM account; 

BEGIN 
UPDATE account SET status = 'active' WHERE status = 'inactive'; 
dbms_output.put_line(SQL%ROWCOUNT||' no of account updated'); 
END; 
/ 

Problem statement 7. 
Q 1. Write an SQL code block these raise a user defined exception where business rule is 
voilated. 
BR for client_master table specifies when the value of bal_due field is less than 0 handle 
the 
exception.

Declare 
input number(10); 
client_id number; 
bal_due Exception; 
Begin 
client_id :=& client_id; 
input :=&input; 
IF input < 0 THEN 
raise bal_due; 
ELSE 
INSERT INTO client_master VALUES(client_id,input); 
dbms_output.put_line('Inserted successfully'); 
END IF; 
Exception 
when bal_due then 
dbms_output.put_line(input || 'Your balance is less then 0'); 
End; 
/


Q 2. Organization has decided to increase the salary of employees by 10% of existing 
salary, who 
are having salary less than average salary of organization, Whenever such salary updates 
takes 
place, a record for the same is maintained in the increment_salary table. 
EMP (E_no , Salary) 
increment_salary(E_no , Salary) 
SELECT * FROM salary; 

CURSOR salhigh IS SELECT emp_no,salary FROM salary WHERE salary < (SELECT 
AVG(salary) FROM salary); 
memp_no salary.emp_no%type; 
msalary salary.salary%type; 
BEGIN 
OPEN salhigh; 
IF salhigh%isopen THEN 
LOOP 
fetch salhigh into memp_no,msalary; 
exit when salhigh%notfound; 
if salhigh%found then 
update salary set salary = (0.1*msalary+ msalary) WHERE emp_no = memp_no; 
insert into increment_salary values(memp_no,0.1*msalary+ msalary); 
end if; 
end loop; 
end if; 
Close salhigh; 
END; 
/ 

PL/SQL procedure successfully completed. 
SELECT * FROM salary; 

SELECT * FROM increment_salary; 


Problem statement 8. 
Q 1.Borrower(Roll_no, Name, DateofIssue, NameofBook, Status) 
Fine(Roll_no,Date,Amt) 

1. Accept roll_no& name of book from user. 
2. Check the number of days (from date of issue), if days are between 15 to 30 then fine 
amount 
will be Rs 5per day. 
3. If no. of days>30, per day fine will be Rs 50 per day & for days less than 30, Rs. 5 per day. 
After submitting the book, status will change from I to R 
4. If condition of fine is true, then details will be stored into fine table. 
5. Also handles the exception by named exception handler or user define exception 
handler.
 
CREATE PROCEDURE process_borrower_fine ( 
mroll_no IN NUMBER 
) 
IS 
days INTEGER; 
doi DATE; 
dor DATE := SYSDATE; 
mamt NUMBER; 
BEGIN 
SELECT dateofissue INTO doi FROM borrower WHERE roll_no = mroll_no; 
days := dor - doi; 
dbms_output.put_line(days); 
UPDATE borrower SET status = 'r' WHERE roll_no = mroll_no; 
IF (days > 30) THEN 
mamt := (days - 30) * 50 + 75; 
INSERT INTO fine VALUES (mroll_no, dor, mamt); 
ELSIF (days > 15) THEN 
mamt := (days - 15) * 5; 
INSERT INTO fine VALUES (mroll_no, dor, mamt); 
END IF; 
END; 
SQL> BEGIN 
2 process_borrower_fine(&mroll_no); 
3 END; 
4 / 

select * from fine; 


Problem statement 9. 

Q 1. Write PL/SQL block using explicit cursor for following requirements: 
College has decided to mark all those students detained (D) who are having attendance 
less than 
75%. 
Whenever such update takes place, a record for the same is maintained in the D_Stud 
table. 
create table stud21(roll number(4), att number(4), status varchar(1)); 
create table d_stud(roll number(4), att number(4)); 
SELECT * FROM stud; 


DECLARE 
CURSOR check_status IS SELECT roll_no,att FROM stud WHERE att < 75 ; 
mroll_no stud.roll_no%type; 
matt stud.att%type; 
BEGIN 
OPEN check_status; 
IF check_status%isopen THEN 
LOOP 
FETCH check_status INTO mroll_no,matt; 
exit WHEN check_status%notfound; 
IF check_status%found THEN 
UPDATE stud SET status = 'D' WHERE roll_no = mroll_no; 
INSERT INTO d_stud VALUES(mroll_no,matt); 
END IF; 
END LOOP; 
END IF; 
CLOSE check_status; 
END; 
/ 
PL/SQL procedure successfully completed. 
SELECT * FROM stud; 


Problem statement 10.
 
Q 1.Consider table Stud(Roll, Att,Status) 
Write a PL/SQL block for following requirement and handle the exceptions. 
Roll no. of student will be entered by user. Attendance of roll no. entered by user will be 
checked in 
Stud table. If attendance is less than 75% then display the message “Term not granted” 
and set the 
status in stud table as “D”. Otherwise display message “Term granted” and set the status 
in stud 
table as “ND”. 

DECLARE 
v_roll_number Stud.Roll%TYPE; 
v_attendance Stud.Att%TYPE; 
v_status Stud.Status%TYPE; 
BEGIN -- Accepting roll number from user 
v_roll_number := &roll_number; -- Retrieving attendance and status for the entered roll number 
SELECT Att, Status 
INTO v_attendance, v_status 
FROM Stud 
WHERE Roll = v_roll_number; -- Checking attendance percentage and updating status accordingly 
IF v_attendance < 75 THEN 
DBMS_OUTPUT.PUT_LINE('Term not granted'); 
UPDATE Stud 
SET Status = 'D' 
WHERE Roll = v_roll_number; 
ELSE 
DBMS_OUTPUT.PUT_LINE('Term granted'); 
UPDATE Stud 
SET Status = 'ND' 
WHERE Roll = v_roll_number; 
END IF; 
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
DBMS_OUTPUT.PUT_LINE('Roll number not found'); 
WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM); 
END; 
/ 


Q 2.Write a update, delete trigger on clientmstr table. The System should keep track of the 
records 
that ARE BEING updated or deleted. The old value of updated or deleted records should be 
added 
in audit_trade table. (separate implementation using both row and statement triggers) 
CREATE OR REPLACE TRIGGER trade_record 
AFTER INSERT OR DELETE 
ON client 
FOR EACH ROW 
DECLARE 
op VARCHAR(10); 
BEGIN 
IF updating THEN 
op:='update'; 
END IF; 
IF deleting THEN 
op:='Delete'; 
END IF; 
INSERT INTO trade VALUES(:old.c_id,:old.p_amt,op); 
END; 
/ 

SELECT * FROM trade; 
no rows selected 
CREATE OR REPLACE TRIGGER trade_record 
AFTER UPDATE OR DELETE 
ON client 
FOR EACH ROW 
DECLARE 
op VARCHAR(10); 
BEGIN 
IF updating THEN 
op:='update'; 
END IF; 
IF deleting THEN 
op:='Delete'; 
END IF; 
INSERT INTO trade VALUES(:old.c_id,:old.p_amt,op); 
END; 
/ 
Trigger created. 
SELECT * FROM client; 
SELECT * FROM trade; 
no rows selected 
UPDATE client SET p_amt = 1000 WHERE p_amt=1500; 
4 rows updated. 
SELECT * FROM trade; 

CREATE OR REPLACE TRIGGER trade_record 
AFTER UPDATE OR DELETE 
ON client 
DECLARE 
op VARCHAR(10); 
BEGIN 
IF updating THEN 
op:='update'; 
END IF; 
IF deleting THEN 
op:='Delete'; 
END IF; 
INSERT INTO trade VALUES(:old.c_id,:old.p_amt,op); 
END; 

CREATE TABLE trade_status(status VARCHAR(10)); 
Table created. 
CREATE OR REPLACE TRIGGER trade_record 
AFTER UPDATE OR DELETE 
ON client
 
DECLARE 
op VARCHAR(10); 
BEGIN 
IF updating THEN 
op:='update'; 
END IF; 
IF deleting THEN 
op:='Delete'; 
END IF; 
INSERT INTO trade_status VALUES(op); 
END; 
/ 
Trigger created. 
SELECT * FROM client; 

UPDATE client SET p_amt = 1500 WHERE p_amt=1000; 
4 rows updated. 
SELECT * FROM trade_status; 

Problem statement 11. 

Q 1. Write a stored function in PL/SQL for given requirement and use the same in PL/SQL 
block. 
Account no. and branch name will be accepted from user. The same will be searched in 
table 
acct_details. If status of account is active then display appropriate message and also store 
the 
account details in active_acc_details table, otherwise display message on screen “account 
is 
inactive”. 
 
create table acc_details(acc_no NUMBER primary key , b_name char(10) , status 
char(2)); 
Table created. 
SELECT * FROM acc_details; 

CREATE OR REPLACE FUNCTION account_fun ( 
macc_no IN NUMBER, 
b_name IN CHAR -- Removed size specification 
) RETURN CHAR -- Removed size specification 
IS 
mst CHAR(2); -- It's okay to specify sizes for internal variables 
BEGIN 
SELECT status INTO mst FROM acc_details 
WHERE acc_no = macc_no AND b_name = b_name; -- Use the parameter b_name 
RETURN mst; 
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
RETURN NULL; -- Return NULL if no data is found 
WHEN OTHERS THEN 
RETURN NULL; -- General error handling 
END; 

Function created. 
DECLARE 
macc_no NUMBER(10); 
mst CHAR(2); 
b_name CHAR(10); -- Example value for b_name 
BEGIN 
macc_no := &macc_no; 
b_name := '&b_name'; 
mst := account_fun(macc_no, b_name); -- Corrected function name and added b_name 
IF mst = 'A' THEN 
DBMS_OUTPUT.PUT_LINE('Account is active'); -- Corrected quotes and added missing 
parenthesis 
INSERT INTO active_acc_details VALUES(macc_no,b_name,mst); 
ELSE 
DBMS_OUTPUT.PUT_LINE('Account is Inactive'); -- Corrected quotes and added missing 
parenthesis 
END IF; 
END; 
select * from active_acc_details; 


Problem statement 12. 
Q 1. Write an SQL code block these raise a user defined exception where business rule is 
voilated. 
BR for client_master table specifies when the value of bal_due field is less than 0 handle 
the 
exception. 
Declare 
input number(10); 
client_id number; 
bal_due Exception; 
Begin 
client_id :=& client_id; 
input :=&input; 
IF input < 0 THEN 
raise bal_due; 
ELSE 
INSERT INTO client_master VALUES(client_id,input); 
dbms_output.put_line('Inserted successfully'); 
END IF; 
Exception 
when bal_due then 
dbms_output.put_line(input || 'Your balance is less then 0'); 
End; 


Q 2.Write a before trigger for Insert, update event considering following requirement: 
Emp(e_no, e_name, salary) 
I) Trigger action should be initiated when salary is tried to be inserted is less than Rs. 
50,000/- 
II) Trigger action should be initiated when salary is tried to be updated for value less than 
Rs. 
50,000/- 
Action should be rejection of update or Insert operation by displaying appropriate error 
message. 
Also the new values expected to be inserted will be stored in new table. 
Tracking(e_no, salary). 
SELECT * FROM employee; 
no rows selected 

CREATE OR REPLACE TRIGGER emp_sal_record 
2 BEFORE UPDATE OR INSERT 
3 ON employee 
4 FOR EACH ROW 
5 DECLARE 
6 sal NUMBER:=:new.salary; 
7 BEGIN 
8 IF sal < 50000 THEN 
9 IF updating THEN 
10 raise_application_error(-20003,'This update opration violet comapany rule / record 
not inserted'); 
11 END IF; 
12 IF inserting THEN 
13 raise_application_error(-20003,'This insert opration violet comapany rule / record 
not inserted'); 
14 END IF; 
15 ELSE 
16 DBMS_OUTPUT.PUT_LINE('Record created successfully'); 
17 INSERT INTO emp_sal VALUES(:new.e_no,:new.salary); 
18 END IF; 
19 END; 
20 / 
Trigger created. 
INSERT INTO employee VALUES(129,'Aviraj',100000); 
Record created successfully 
1 row created. 
INSERT INTO employee VALUES(124,'Ankit',1000); 
INSERT INTO employee VALUES(124,'Ankit',1000) 
UPDATE employee SET salary = 1000 WHERE e_no =129; 
Problem statement 13. 

Q 1. . Write a PL/SQL stored Procedure for following requirements and call the procedure 
in appropriate 
PL/SQL block. 
Borrower(Rollin, Name, DateofIssue, NameofBook, Status) 
Fine(Roll_no,Date,Amt) 
Accept roll_no& name of book from user. 

1. Check the number of days (from date of issue), if days are between 15 to 30 then fine 
amount 
will be Rs 5per day. 
2. If no. of days>30, per day fine will be Rs 50 per day & for days less than 30, Rs. 5 per day. 
3. After submitting the book, status will change from I to R. 
4. If condition of fine is true, then details will be stored into fine table. 

CREATE PROCEDURE process_borrower_fine ( 
mroll_no IN NUMBER 
) 
IS 
days INTEGER; 
doi DATE; 
dor DATE := SYSDATE; 
mamt NUMBER; 
BEGIN 
SELECT dateofissue INTO doi FROM borrower WHERE roll_no = mroll_no; 
days := dor - doi; 
dbms_output.put_line(days); 
UPDATE borrower SET status = 'r' WHERE roll_no = mroll_no; 
IF (days > 30) THEN 
mamt := (days - 30) * 50 + 75; 
INSERT INTO fine VALUES (mroll_no, dor, mamt); 
ELSIF (days > 15) THEN 
mamt := (days - 15) * 5; 
INSERT INTO fine VALUES (mroll_no, dor, mamt); 
END IF; 
END; 
SQL> BEGIN 
2 process_borrower_fine(&mroll_no); 
3 END; 
4 / 
SQL> select * from fine; 

Problem statement 14. 

Q 1. Write a Stored Procedure namely proc_Grade for the categorization of student. If 
marks 
scored by students in examination is <=1500 and marks>=990 then student will be placed 
in 
distinction category if marks scored are between 989 and900 category is first class, if 
marks 899 
and 825 category is Higher Second Class. 
Write a PL/SQL block for using procedure created with above requirement. 
Stud_Marks(name, total_marks) 
Result(Roll,Name, Class) 
select * from stud_marks; 

CREATE OR REPLACE PROCEDURE proc_Grade( 
p_name IN VARCHAR2, 
p_marks IN NUMBER, 
p_roll IN NUMBER) 
IS 
v_class VARCHAR2(100); 
BEGIN 
IF p_marks <= 1500 AND p_marks >= 990 THEN 
v_class := 'Dist'; 
ELSIF p_marks < 990 AND p_marks >= 900 THEN 
v_class := 'First'; 
ELSIF p_marks < 900 AND p_marks >= 825 THEN 
v_class := 'Higher'; 
ELSE 
v_class := 'Other'; 
END IF; 
INSERT INTO Result VALUES (p_roll, p_name, v_class); 
END; 
DECLARE 
v_name VARCHAR2(100); 
v_total_marks NUMBER; 
v_roll NUMBER; 
BEGIN 
v_roll := &v_roll; 
v_name := '&v_name'; 
select marks INTO v_total_marks FROM stud_marks where roll_no = v_roll; 
proc_Grade(v_name, v_total_marks, v_roll); 
END; 

select * from Result; 

Problem statement 15. 

Create Database PCCOE 
Create following Collections 
Teachers(Tname,dno,dname,experience,salary,date_of_joining ) 
Students(Sname,roll_no,class) 
Q1. Find the information about all teachers 
Q2. Find the information about all teachers of computer department 
Q3. Find the information about all teachers of computer,IT,ande&TC department 
Q4. Find the information about all teachers of computer,IT,and E&TC department having 
salary 
greater than or equl to 10000/- 
Q5. Find the student information having roll_no = 2 or Sname=xyz 
Q6. Update the experience of teacher-praveen to 10years, if the entry is not available in 
database 
consider the entry as new entry. 
Q7. Update the deparment of all the teachers working in IT deprtment to COMP 
Q8. Find the teachers name and their experience from teachers collection 
Q9. Using Save() method insert one entry in department collection 
Q10. Using Save() method change the dept of teacher praveen to IT 
Q11. Delete all the doccuments from teachers collection having IT dept. 
Q12. Display with pretty() method, the first 3 doccuments in teachers collection in 
ascending order. 

Problem statements 16 
Consider the relational database 
Supplier(Sid,Sname,address) 
Parts(Pid, Pname, Color) 
Catalog(sid,pid,cost) 

Q. Find name of all parts whose color is green. 
SELECT Pname 
FROM Parts 
WHERE Color = 'green'; 

Q. Find names of suppliers who supply some red parts. 
SELECT DISTINCT Sname 
FROM Supplier 
WHERE Sid IN ( 
SELECT Sid 
FROM Catalog 
WHERE pid IN ( 
SELECT Pid 
FROM Parts 
WHERE Color = 'red' 
) 
); 

Q. Find names of all parts whose cost is more than Rs25. 
SELECT Pname 
FROM Parts 
WHERE Pid IN ( 
SELECT pid 
FROM Catalog 
WHERE cost > 25 
); 

Consider the relational database 
Person(pname,street city) 
Company(cname,city) 
Manages(pname,mname) 
Q. Find the street and city of all employees who work for “Idea”, live in Pune and earn 
more than 3000. 
SELECT p.street, p.city 
FROM Person p 
JOIN Manages m ON p.pname = m.pname 
JOIN Company c ON m.mname = c.cname 
WHERE c.cname = 'Idea' AND p.city = 'Pune' AND p.pname IN ( 
SELECT pname 
FROM Manages 
GROUP BY pname 
HAVING MIN(salary) > 3000 
); 

Consider the relational database 
Student(Rollno,name,address) 
Subject(sub_code,sub_name) 
Marks(Rollno,sub_code, marks) 

Q. Find out average marks of each student along with the name of student. 
SELECT s.name, AVG(m.marks) AS average_marks FROM Student s JOIN Marks m ON s.Rollno 
= m.Rollno GROUP BY s.Rollno, s.name; 
Q. Find how many students have failed in the subject “DBMS”
 
SELECT COUNT(*) AS num_failed_students FROM Marks WHERE sub_code =SELECT 
sub_code FROM Subject WHERE sub_name = 'DBMS') AND marks < 40; 

Problem statements 17 
Write Pl/SQL code block that will accept account number from user , check if the users 
balance is less than 
the minimum balance , only deduct Rs.100/- from the balance . 
CREATE TABLE Account (Acc_no NUMBER PRIMARY KEY, branch_name VARCHAR2(50), 
balance NUMBER); 
INSERT INTO Account (Acc_no, branch_name, balance)VALUES (1, 'Branch1', 1500); 
INSERT INTO Account (Acc_no, branch_name, balance)VALUES (2, 'Branch2', 2000); 
INSERT INTO Account (Acc_no, branch_name, balance)VALUES (3, 'Branch3', 100); 

DECLARE 
v_acc_no NUMBER; 
v_balance NUMBER; 
v_min_balance NUMBER := 1000; -- Minimum balance required 
BEGIN -- Accepting account number from user 
v_acc_no := &acc_no; -- Retrieving balance for the entered account number 
SELECT balance INTO v_balance 
FROM Account 
WHERE Acc_no = v_acc_no; -- Checking if balance is less than minimum balance 
IF v_balance < v_min_balance THEN 
UPDATE Account 
SET balance = balance - 100 
WHERE Acc_no = v_acc_no; 
DBMS_OUTPUT.PUT_LINE('Deducted Rs.100 from the balance.'); 
ELSE 
DBMS_OUTPUT.PUT_LINE('Balance is above minimum balance.'); 
END IF; 
COMMIT; -- Committing the transaction 
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
DBMS_OUTPUT.PUT_LINE('Account number not found.'); 
WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM); 
ROLLBACK; -- Rolling back the transaction in case of error 
END; 
/ 


Problem statements 18 
Write Pl/SQL code block for inverting number 1234 to 4321. 
DECLARE 
v_number NUMBER := 1234; -- Number to invert 
v_inverted_number NUMBER := 0; 
v_remainder NUMBER; 
BEGIN 
WHILE v_number > 0 LOOP 
v_remainder := MOD(v_number, 10); 
v_inverted_number := v_inverted_number * 10 + v_remainder; 
v_number := (v_number - v_remainder) / 10; 
END LOOP; 
DBMS_OUTPUT.PUT_LINE('Inverted Number: ' || v_inverted_number); 
END; 
/ 



Problem statements 19 
The bank manager has decided to mark all those accounts as inactive (I) on which there 
are no 
transactions performed in last 365 days. Whenever any such update takes place a record 
for the 
same is maintained in the INACT_MASTER_TABLE comprising of the account number, the 
opening date and type of account. Write PL/SQL code block to do the same(cursor for 
loop) 
(We doesn’t have for loop cursor) 


Problem statements 20 

Write PL/SQL code block that will merge the data available in the newly created table 
NEW_BRANCHES with the data available in the table BRANCH_MASTER. If the data in the 
f
 irst 
table already exists in the second table then data should be skipped.(parameterized 
cursor) 
(We doesn’t have parameterize cursor)

 
Problem statements 21 

Write PL/SQL code block such that depending upon user supplied account number, the 
customer to 
whom account belongs , the introducer of that account are inserted into 
ACCOUNT_MASTER_INFO table .If the user enters an account number that is not in the 
ACCOUNT_MASTER table, then the PL/SQL block must display appropriate error 
message(Exception Handling) 

DECLARE 
v_acc_no NUMBER := &account_number; -- User-supplied account number 
v_cust_name VARCHAR2(100); 
v_introducer VARCHAR2(100); 
BEGIN 
SELECT cust_name, introducer 
INTO v_cust_name, v_introducer 
FROM ACCOUNT_MASTER 
WHERE acc_no = v_acc_no; 
INSERT INTO ACCOUNT_MASTER_INFO (acc_no, cust_name, introducer) 
VALUES (v_acc_no, v_cust_name, v_introducer); 
DBMS_OUTPUT.PUT_LINE('Record inserted successfully.'); 
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
DBMS_OUTPUT.PUT_LINE('Account number not found in ACCOUNT_MASTER table.'); 
WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM); 
END; 
/ 



Problem statements 22 
A stored function is created to perform the ACCOUNT_NO check operation 
.F_checkAccNO() is 
the name of function which accept a variable ACCOUNT_NO and returns the value to host 
environment The value changes from 0(if ACCOUNT_NO does not exist) to 1(if 
ACCOUNT_NO 
exist) depending on the records retrieved. 
CREATE OR REPLACE FUNCTION F_checkAccNO (p_account_no IN NUMBER) 
RETURN NUMBER 
IS 
v_count NUMBER; 
BEGIN 
-- Check if the account number exists in the table 
SELECT COUNT(*) 
INTO v_count 
FROM ACCOUNT_MASTER 
WHERE acc_no = p_account_no; -- Return 1 if account number exists, otherwise return 0 
RETURN CASE WHEN v_count > 0 THEN 1 ELSE 0 END; 
END; 
/ 
DECLARE 
v_result NUMBER; 
BEGIN 
v_result := F_checkAccNO(123456789); -- Replace 123456789 with the account number 
you want to check 
IF v_result = 1 THEN 
DBMS_OUTPUT.PUT_LINE('Account number exists.'); 
ELSE 
DBMS_OUTPUT.PUT_LINE('Account number does not exist.'); 
END IF; 
END; 
/ 


Problem statements 23 
create a row level trigger for the CUSTOMERS table that would fire for INSERT or UPDATE 
or DELETE 
operations performed on the CUSTOMERS table. This trigger will display the salary 
difference between the old 
values and new values 
CREATE OR REPLACE TRIGGER customers_salary_trigger 
BEFORE INSERT OR UPDATE OR DELETE ON customers 
FOR EACH ROW 

DECLARE 
v_old_salary NUMBER; 
v_new_salary NUMBER := :NEW.salary; 
BEGIN 
IF INSERTING OR UPDATING THEN 
v_old_salary := :OLD.salary; 
DBMS_OUTPUT.PUT_LINE('Salary difference: ' || (v_new_salary - v_old_salary)); 
ELSIF DELETING THEN 
DBMS_OUTPUT.PUT_LINE('Salary deleted: ' || :OLD.salary); 
END IF; 
END; 
/ 


Problem statements 24 
Write PL/SQL block to update the Customer table and increase the salary of each customer 
by 500 
and use the SQL%ROWCOUNTattribute to determine the number of rows affected. 
DECLARE 
v_num_rows NUMBER; 
BEGIN -- Update the Customer table to increase the salary by 500 
UPDATE Customer 
SET salary = salary + 500; -- Get the number of rows affected by the update 
v_num_rows := SQL%ROWCOUNT; -- Display the number of rows affected 
DBMS_OUTPUT.PUT_LINE('Number of rows updated: ' || v_num_rows); 
END; 
/ 




